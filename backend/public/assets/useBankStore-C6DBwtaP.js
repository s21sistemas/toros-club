import{o as d,h as l,e as s,i as u,u as m,k as y,d as b,f as k,t as c}from"./index-CjWeqAa0.js";const i=b(s,"bancos"),g=async e=>{try{return(await y(i,e)).id}catch(r){console.error("Error al agregar banco:",r)}},p=async e=>d(i,r=>{const a=r.docs.map(n=>({id:n.id,...n.data()}));e(a)}),f=async(e,r)=>{try{const a=l(s,"bancos",e);await m(a,r)}catch(a){console.error("Error al actualizar banco:",a)}},h=async e=>{try{const r=l(s,"bancos",e);await u(r)}catch(r){console.error("Error al eliminar banco:",r)}};let t=null;const w=k((e,r)=>({banks:[],banksCount:0,loading:!1,getDataBanks:async()=>(e({loading:!0}),new Promise((a,n)=>{try{t?a(r().banks):t=p(o=>{e({banks:o,banksCount:o.length}),a(o)})}catch(o){console.error(o),n(o)}finally{e({loading:!1})}})),addBank:async a=>{const n=async()=>{try{await g(a)}catch(o){console.error(o)}};c.promise(n(),{loading:"Creando registro...",success:"Registro creado correctamente",error:"Falló al crear el registro."})},editBank:async a=>{const n=async()=>{try{await f(a.id,a)}catch(o){console.error(o)}};c.promise(n(),{loading:"Actualizando...",success:"Actualizado correctamente",error:"Falló al eliminar."})},deleteBank:async a=>{const n=async()=>{try{await h(a)}catch(o){console.error(o)}};c.promise(n(),{loading:"Eliminando...",success:"Eliminado correctamente",error:"Falló al eliminar."})}}));export{w as u};
